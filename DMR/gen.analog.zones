#!/usr/bin/env python3
"""
Channel Table Converter - Converts radio channel tables into a condensed format.
"""

def convert_table(input_lines):
    """
    Convert input channel table lines into condensed format.
    
    Args:
        input_lines (list): List of input lines from the file
        
    Returns:
        list: Formatted output lines
    """
    output = []
    current_group = None
    group_counter = 0
    line_counter = 1
    current_letter = None
    letter_start = 1
    first_in_group = True
    
    for line in input_lines:
        line = line.strip()
        if not line:
            continue  # Skip empty lines
            
        if line.startswith('#'):
            # Finish previous group's last letter if exists
            if current_letter is not None:
                output.append((group_counter, current_letter, '-', f"{letter_start}-{line_counter-1}"))
            
            # Start new group
            current_group = line[1:].strip()
            group_counter += 1
            current_letter = None
            first_in_group = True
        else:
            parts = line.split()
            if not parts:
                continue  # Skip lines with no content
                
            letter = parts[0]
            
            if letter != current_letter:
                # Finish previous letter if exists
                if current_letter is not None:
                    output.append((group_counter, current_letter, '-', f"{letter_start}-{line_counter-1}"))
                
                # Start new letter
                current_letter = letter
                letter_start = line_counter
                
                if first_in_group:
                    output.append((group_counter, current_letter, current_group, f"{line_counter}-"))
                    first_in_group = False
            
            line_counter += 1
    
    # Finish last letter if exists
    if current_letter is not None:
        output.append((group_counter, current_letter, '-', f"{letter_start}-{line_counter-1}"))
    
    # Process intermediate output to combine ranges
    final_output = []
    for i, (g_num, letter, group, range_str) in enumerate(output):
        # Format group number with 4-character width
        formatted_group_num = f"{g_num:4d}"
        
        # Check if this is a group header that needs range completion
        if group != '-' and i+1 < len(output) and output[i+1][0] == g_num and output[i+1][1] == letter:
            start = range_str.rstrip('-')
            end = output[i+1][3].split('-')[-1]
            final_output.append(f"{formatted_group_num}{letter}   {group.ljust(15)}{start}-{end}")
        elif group == '-':
            # Only include standalone dash entries
            if i == 0 or output[i-1][0] != g_num or output[i-1][1] != letter:
                final_output.append(f"{formatted_group_num}{letter}   {group.ljust(15)}{range_str}")
        else:
            # Single line entry
            final_output.append(f"{formatted_group_num}{letter}   {group.ljust(15)}{range_str.rstrip('-')}")
    
    return final_output

def main():
    import sys
    
    if len(sys.argv) != 2:
        print("Usage: python convert_table.py <input_file>")
        sys.exit(1)
    
    input_file = sys.argv[1]
    
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            input_lines = f.readlines()
    except FileNotFoundError:
        print(f"Error: File '{input_file}' not found.")
        sys.exit(1)
    
    output_lines = convert_table(input_lines)
    for line in output_lines:
        print(line)

if __name__ == "__main__":
    main()
    
    
    
